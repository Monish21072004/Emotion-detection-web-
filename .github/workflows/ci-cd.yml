name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # Adjust to your preferred version

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

  test:
    name: Run Automated Tests & Security Scans
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install test dependencies (adjust if you have additional requirements)
          pip install pytest

      - name: Run Unit Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Run Integration Tests
        run: |
          # Run integration tests if you have a separate suite; otherwise, remove or adjust this step.
          pytest tests/integration

      - name: Run Security Scan
        run: |
          pip install bandit
          # Run bandit to scan for common security issues
          bandit -r .

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # Only deploy on changes to the main branch
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy Application
        run: |
          echo "Deploying the application..."
          # Replace with your deployment script or commands.
          # For instance, if using Docker:
          # docker build -t my-app .
          # docker run -d -p 5000:5000 my-app
          # Or for Heroku:
          # git push heroku main
          #
          # For now, we'll just print a message.
          echo "Deployment complete!"
